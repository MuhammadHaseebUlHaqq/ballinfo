{"ast":null,"code":"import { io } from 'socket.io-client';\nclass SocketService {\n  constructor() {\n    this.socket = null;\n    this.listeners = new Map();\n    this.connectionAttempts = 0;\n    this.maxRetries = 3;\n    this.debug = true;\n    this.isConnecting = false;\n    this.reconnectTimer = null;\n  }\n  connect() {\n    if (this.socket || this.isConnecting) return;\n    this.isConnecting = true;\n    const serverUrl = process.env.REACT_APP_API_URL || 'http://localhost:3000';\n    console.log('Attempting to connect to:', serverUrl);\n    try {\n      this.socket = io(serverUrl, {\n        reconnectionDelay: 1000,\n        reconnection: true,\n        reconnectionAttempts: 5,\n        transports: ['polling', 'websocket'],\n        upgrade: true,\n        rememberUpgrade: true,\n        timeout: 20000,\n        withCredentials: true,\n        autoConnect: true,\n        forceNew: false,\n        path: '/socket.io',\n        query: {\n          device: 'mobile',\n          timestamp: Date.now()\n        }\n      });\n      this.setupConnectionHandlers();\n    } catch (error) {\n      console.error('Error creating socket connection:', error);\n      this.handleConnectionError(error);\n    }\n  }\n  setupConnectionHandlers() {\n    this.socket.on('connect', () => {\n      console.log('Socket connected successfully. Transport:', this.socket.io.engine.transport.name);\n      this.connectionAttempts = 0;\n      this.isConnecting = false;\n      clearTimeout(this.reconnectTimer);\n\n      // Request live matches immediately after connection\n      this.requestLiveMatches();\n\n      // Listen for transport upgrades\n      this.socket.io.engine.on('upgrade', () => {\n        console.log('Transport upgraded to:', this.socket.io.engine.transport.name);\n      });\n    });\n    this.socket.on('connect_error', error => {\n      console.error('Socket connection error:', error);\n      this.handleConnectionError(error);\n    });\n    this.socket.on('disconnect', reason => {\n      console.log('Socket disconnected. Reason:', reason);\n      this.isConnecting = false;\n      if (reason === 'io server disconnect' || reason === 'transport close') {\n        this.handleReconnect();\n      }\n    });\n    this.socket.on('error', error => {\n      console.error('Socket error event:', error);\n      this.emitError(error);\n    });\n\n    // Monitor connection state\n    this.socket.io.on('reconnect_attempt', attempt => {\n      console.log(`Reconnection attempt ${attempt}`);\n    });\n    this.socket.io.on('reconnect_failed', () => {\n      console.log('Reconnection failed');\n      this.handleConnectionError(new Error('Reconnection failed'));\n    });\n  }\n  handleConnectionError(error) {\n    this.connectionAttempts++;\n    this.isConnecting = false;\n    if (this.connectionAttempts >= this.maxRetries) {\n      const errorMessage = {\n        type: 'CONNECTION_ERROR',\n        message: `Unable to connect to the server (${error.message}). Please check your internet connection.`\n      };\n      console.error('Max retries reached:', errorMessage);\n      this.emitError(errorMessage);\n    } else {\n      this.handleReconnect();\n    }\n  }\n  handleReconnect() {\n    console.log('Attempting to reconnect...');\n    clearTimeout(this.reconnectTimer);\n    this.reconnectTimer = setTimeout(() => {\n      if (this.socket) {\n        this.socket.connect();\n      } else {\n        this.connect();\n      }\n    }, 2000);\n  }\n  requestLiveMatches() {\n    if (!this.socket) {\n      console.error('Cannot request matches: No socket connection');\n      return;\n    }\n    console.log('Requesting live matches from server');\n    this.socket.emit('request_live_matches');\n  }\n  emitError(error) {\n    const callback = this.listeners.get('error');\n    if (callback) {\n      callback(error);\n    }\n  }\n  disconnect() {\n    clearTimeout(this.reconnectTimer);\n    if (this.socket) {\n      console.log('Disconnecting socket...');\n      this.socket.disconnect();\n      this.socket = null;\n      this.connectionAttempts = 0;\n      this.isConnecting = false;\n    }\n  }\n  subscribe(event, callback) {\n    if (!this.socket) {\n      console.log('No socket connection, attempting to connect...');\n      this.connect();\n    }\n    console.log('Subscribing to event:', event);\n    this.socket.on(event, data => {\n      console.log(`Received ${event} event:`, data);\n      callback(data);\n    });\n    this.listeners.set(event, callback);\n  }\n  unsubscribe(event) {\n    if (!this.socket) return;\n    console.log('Unsubscribing from event:', event);\n    const callback = this.listeners.get(event);\n    if (callback) {\n      this.socket.off(event, callback);\n      this.listeners.delete(event);\n    }\n  }\n  subscribeToMatch(matchId) {\n    if (!this.socket) this.connect();\n    console.log('Subscribing to match:', matchId);\n    this.socket.emit('subscribe_match', matchId);\n  }\n  unsubscribeFromMatch(matchId) {\n    if (!this.socket) return;\n    console.log('Unsubscribing from match:', matchId);\n    this.socket.emit('unsubscribe_match', matchId);\n  }\n}\nexport default new SocketService();","map":{"version":3,"names":["io","SocketService","constructor","socket","listeners","Map","connectionAttempts","maxRetries","debug","isConnecting","reconnectTimer","connect","serverUrl","process","env","REACT_APP_API_URL","console","log","reconnectionDelay","reconnection","reconnectionAttempts","transports","upgrade","rememberUpgrade","timeout","withCredentials","autoConnect","forceNew","path","query","device","timestamp","Date","now","setupConnectionHandlers","error","handleConnectionError","on","engine","transport","name","clearTimeout","requestLiveMatches","reason","handleReconnect","emitError","attempt","Error","errorMessage","type","message","setTimeout","emit","callback","get","disconnect","subscribe","event","data","set","unsubscribe","off","delete","subscribeToMatch","matchId","unsubscribeFromMatch"],"sources":["E:/Muqtasid BS Computer Science/SPRING-25/Project/ballinfo/frontEnd/src/services/socketService.js"],"sourcesContent":["import { io } from 'socket.io-client';\n\nclass SocketService {\n    constructor() {\n        this.socket = null;\n        this.listeners = new Map();\n        this.connectionAttempts = 0;\n        this.maxRetries = 3;\n        this.debug = true;\n        this.isConnecting = false;\n        this.reconnectTimer = null;\n    }\n\n    connect() {\n        if (this.socket || this.isConnecting) return;\n\n        this.isConnecting = true;\n        const serverUrl = process.env.REACT_APP_API_URL || 'http://localhost:3000';\n        \n        console.log('Attempting to connect to:', serverUrl);\n\n        try {\n            this.socket = io(serverUrl, {\n                reconnectionDelay: 1000,\n                reconnection: true,\n                reconnectionAttempts: 5,\n                transports: ['polling', 'websocket'],\n                upgrade: true,\n                rememberUpgrade: true,\n                timeout: 20000,\n                withCredentials: true,\n                autoConnect: true,\n                forceNew: false,\n                path: '/socket.io',\n                query: {\n                    device: 'mobile',\n                    timestamp: Date.now()\n                }\n            });\n\n            this.setupConnectionHandlers();\n        } catch (error) {\n            console.error('Error creating socket connection:', error);\n            this.handleConnectionError(error);\n        }\n    }\n\n    setupConnectionHandlers() {\n        this.socket.on('connect', () => {\n            console.log('Socket connected successfully. Transport:', this.socket.io.engine.transport.name);\n            this.connectionAttempts = 0;\n            this.isConnecting = false;\n            clearTimeout(this.reconnectTimer);\n            \n            // Request live matches immediately after connection\n            this.requestLiveMatches();\n\n            // Listen for transport upgrades\n            this.socket.io.engine.on('upgrade', () => {\n                console.log('Transport upgraded to:', this.socket.io.engine.transport.name);\n            });\n        });\n\n        this.socket.on('connect_error', (error) => {\n            console.error('Socket connection error:', error);\n            this.handleConnectionError(error);\n        });\n\n        this.socket.on('disconnect', (reason) => {\n            console.log('Socket disconnected. Reason:', reason);\n            this.isConnecting = false;\n            \n            if (reason === 'io server disconnect' || reason === 'transport close') {\n                this.handleReconnect();\n            }\n        });\n\n        this.socket.on('error', (error) => {\n            console.error('Socket error event:', error);\n            this.emitError(error);\n        });\n\n        // Monitor connection state\n        this.socket.io.on('reconnect_attempt', (attempt) => {\n            console.log(`Reconnection attempt ${attempt}`);\n        });\n\n        this.socket.io.on('reconnect_failed', () => {\n            console.log('Reconnection failed');\n            this.handleConnectionError(new Error('Reconnection failed'));\n        });\n    }\n\n    handleConnectionError(error) {\n        this.connectionAttempts++;\n        this.isConnecting = false;\n        \n        if (this.connectionAttempts >= this.maxRetries) {\n            const errorMessage = {\n                type: 'CONNECTION_ERROR',\n                message: `Unable to connect to the server (${error.message}). Please check your internet connection.`\n            };\n            console.error('Max retries reached:', errorMessage);\n            this.emitError(errorMessage);\n        } else {\n            this.handleReconnect();\n        }\n    }\n\n    handleReconnect() {\n        console.log('Attempting to reconnect...');\n        clearTimeout(this.reconnectTimer);\n        \n        this.reconnectTimer = setTimeout(() => {\n            if (this.socket) {\n                this.socket.connect();\n            } else {\n                this.connect();\n            }\n        }, 2000);\n    }\n\n    requestLiveMatches() {\n        if (!this.socket) {\n            console.error('Cannot request matches: No socket connection');\n            return;\n        }\n        console.log('Requesting live matches from server');\n        this.socket.emit('request_live_matches');\n    }\n\n    emitError(error) {\n        const callback = this.listeners.get('error');\n        if (callback) {\n            callback(error);\n        }\n    }\n\n    disconnect() {\n        clearTimeout(this.reconnectTimer);\n        if (this.socket) {\n            console.log('Disconnecting socket...');\n            this.socket.disconnect();\n            this.socket = null;\n            this.connectionAttempts = 0;\n            this.isConnecting = false;\n        }\n    }\n\n    subscribe(event, callback) {\n        if (!this.socket) {\n            console.log('No socket connection, attempting to connect...');\n            this.connect();\n        }\n\n        console.log('Subscribing to event:', event);\n        this.socket.on(event, (data) => {\n            console.log(`Received ${event} event:`, data);\n            callback(data);\n        });\n        this.listeners.set(event, callback);\n    }\n\n    unsubscribe(event) {\n        if (!this.socket) return;\n\n        console.log('Unsubscribing from event:', event);\n        const callback = this.listeners.get(event);\n        if (callback) {\n            this.socket.off(event, callback);\n            this.listeners.delete(event);\n        }\n    }\n\n    subscribeToMatch(matchId) {\n        if (!this.socket) this.connect();\n        console.log('Subscribing to match:', matchId);\n        this.socket.emit('subscribe_match', matchId);\n    }\n\n    unsubscribeFromMatch(matchId) {\n        if (!this.socket) return;\n        console.log('Unsubscribing from match:', matchId);\n        this.socket.emit('unsubscribe_match', matchId);\n    }\n}\n\nexport default new SocketService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}