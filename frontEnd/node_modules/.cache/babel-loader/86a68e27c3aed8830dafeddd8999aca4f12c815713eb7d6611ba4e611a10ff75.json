{"ast":null,"code":"import { io } from 'socket.io-client';\nclass SocketService {\n  constructor() {\n    this.socket = null;\n    this.listeners = new Map();\n    this.connectionAttempts = 0;\n    this.maxRetries = 5;\n    this.retryDelay = 2000;\n    this.debug = true;\n    this.isConnecting = false;\n    this.reconnectTimer = null;\n    this.dataRefreshInterval = null;\n  }\n  connect() {\n    if (this.socket || this.isConnecting) return;\n    this.isConnecting = true;\n    const serverUrl = process.env.REACT_APP_API_URL || window.location.origin;\n    const isMobile = this.detectDevice() === 'mobile';\n    console.log('Connecting to:', serverUrl, 'Device type:', this.detectDevice());\n    try {\n      this.socket = io(serverUrl, {\n        reconnectionDelay: 1000,\n        reconnection: true,\n        reconnectionAttempts: 10,\n        transports: ['polling', 'websocket'],\n        upgrade: true,\n        rememberUpgrade: true,\n        timeout: 20000,\n        withCredentials: true,\n        autoConnect: true,\n        forceNew: true,\n        path: '/socket.io',\n        query: {\n          device: this.detectDevice(),\n          timestamp: Date.now()\n        }\n      });\n\n      // Connection state monitoring\n      this.socket.on('connect', () => {\n        console.log('Socket connected successfully');\n        this.isConnecting = false;\n        this.connectionAttempts = 0;\n        this.startDataRefresh();\n      });\n      this.socket.on('connect_error', error => {\n        console.error('Connection error:', error);\n        this.handleConnectionError(error);\n      });\n      this.socket.on('disconnect', reason => {\n        console.log('Socket disconnected:', reason);\n        this.stopDataRefresh();\n        if (reason === 'io server disconnect') {\n          setTimeout(() => this.connect(), this.retryDelay);\n        }\n      });\n      this.socket.on('error', error => {\n        console.error('Socket error:', error);\n        this.emitError(error);\n      });\n\n      // Add connection state logging\n      this.socket.io.on('ping', () => {\n        console.log('Socket ping sent');\n      });\n      this.socket.io.on('pong', latency => {\n        console.log('Socket pong received, latency:', latency, 'ms');\n      });\n    } catch (error) {\n      console.error('Error creating socket connection:', error);\n      this.handleConnectionError(error);\n    }\n  }\n  startDataRefresh() {\n    // Clear any existing interval\n    this.stopDataRefresh();\n\n    // Request initial data\n    this.requestLiveMatches();\n\n    // Set up periodic refresh\n    this.dataRefreshInterval = setInterval(() => {\n      var _this$socket;\n      if ((_this$socket = this.socket) !== null && _this$socket !== void 0 && _this$socket.connected) {\n        this.requestLiveMatches();\n      }\n    }, 30000); // Refresh every 30 seconds\n  }\n  stopDataRefresh() {\n    if (this.dataRefreshInterval) {\n      clearInterval(this.dataRefreshInterval);\n      this.dataRefreshInterval = null;\n    }\n  }\n  detectDevice() {\n    const userAgent = navigator.userAgent || navigator.vendor || window.opera;\n    if (/android|iPad|iPhone|iPod/i.test(userAgent)) {\n      return 'mobile';\n    }\n    return 'desktop';\n  }\n  handleConnectionError(error) {\n    this.connectionAttempts++;\n    this.isConnecting = false;\n    console.log(`Connection attempt ${this.connectionAttempts} failed:`, error.message);\n    if (this.connectionAttempts >= this.maxRetries) {\n      console.error('Max retries reached');\n      this.emitError({\n        type: 'CONNECTION_ERROR',\n        message: 'Unable to connect to the server. Please check your internet connection.'\n      });\n    } else {\n      setTimeout(() => this.connect(), this.retryDelay);\n    }\n  }\n  disconnect() {\n    this.stopDataRefresh();\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n    this.isConnecting = false;\n    this.connectionAttempts = 0;\n  }\n  subscribe(event, callback) {\n    if (!this.socket) {\n      console.error('Socket not connected');\n      return;\n    }\n    this.socket.on(event, callback);\n  }\n  unsubscribe(event) {\n    if (!this.socket) return;\n    this.socket.off(event);\n  }\n  emitError(error) {\n    if (this.socket) {\n      this.socket.emit('client_error', error);\n    }\n  }\n  requestLiveMatches() {\n    var _this$socket2;\n    if (!((_this$socket2 = this.socket) !== null && _this$socket2 !== void 0 && _this$socket2.connected)) {\n      console.error('Cannot request matches: Socket not connected');\n      this.connect();\n      return;\n    }\n    console.log('Requesting live matches from server');\n    this.socket.emit('request_live_matches');\n  }\n  subscribeToMatch(matchId) {\n    if (!this.socket) this.connect();\n    console.log('Subscribing to match:', matchId);\n    this.socket.emit('subscribe_match', matchId);\n  }\n  unsubscribeFromMatch(matchId) {\n    if (!this.socket) return;\n    console.log('Unsubscribing from match:', matchId);\n    this.socket.emit('unsubscribe_match', matchId);\n  }\n}\nexport default new SocketService();","map":{"version":3,"names":["io","SocketService","constructor","socket","listeners","Map","connectionAttempts","maxRetries","retryDelay","debug","isConnecting","reconnectTimer","dataRefreshInterval","connect","serverUrl","process","env","REACT_APP_API_URL","window","location","origin","isMobile","detectDevice","console","log","reconnectionDelay","reconnection","reconnectionAttempts","transports","upgrade","rememberUpgrade","timeout","withCredentials","autoConnect","forceNew","path","query","device","timestamp","Date","now","on","startDataRefresh","error","handleConnectionError","reason","stopDataRefresh","setTimeout","emitError","latency","requestLiveMatches","setInterval","_this$socket","connected","clearInterval","userAgent","navigator","vendor","opera","test","message","type","disconnect","subscribe","event","callback","unsubscribe","off","emit","_this$socket2","subscribeToMatch","matchId","unsubscribeFromMatch"],"sources":["E:/Muqtasid BS Computer Science/SPRING-25/Project/ballinfo/frontEnd/src/services/socketService.js"],"sourcesContent":["import { io } from 'socket.io-client';\n\nclass SocketService {\n    constructor() {\n        this.socket = null;\n        this.listeners = new Map();\n        this.connectionAttempts = 0;\n        this.maxRetries = 5;\n        this.retryDelay = 2000;\n        this.debug = true;\n        this.isConnecting = false;\n        this.reconnectTimer = null;\n        this.dataRefreshInterval = null;\n    }\n\n    connect() {\n        if (this.socket || this.isConnecting) return;\n\n        this.isConnecting = true;\n        const serverUrl = process.env.REACT_APP_API_URL || window.location.origin;\n        const isMobile = this.detectDevice() === 'mobile';\n        \n        console.log('Connecting to:', serverUrl, 'Device type:', this.detectDevice());\n\n        try {\n            this.socket = io(serverUrl, {\n                reconnectionDelay: 1000,\n                reconnection: true,\n                reconnectionAttempts: 10,\n                transports: ['polling', 'websocket'],\n                upgrade: true,\n                rememberUpgrade: true,\n                timeout: 20000,\n                withCredentials: true,\n                autoConnect: true,\n                forceNew: true,\n                path: '/socket.io',\n                query: {\n                    device: this.detectDevice(),\n                    timestamp: Date.now()\n                }\n            });\n\n            // Connection state monitoring\n            this.socket.on('connect', () => {\n                console.log('Socket connected successfully');\n                this.isConnecting = false;\n                this.connectionAttempts = 0;\n                this.startDataRefresh();\n            });\n\n            this.socket.on('connect_error', (error) => {\n                console.error('Connection error:', error);\n                this.handleConnectionError(error);\n            });\n\n            this.socket.on('disconnect', (reason) => {\n                console.log('Socket disconnected:', reason);\n                this.stopDataRefresh();\n                \n                if (reason === 'io server disconnect') {\n                    setTimeout(() => this.connect(), this.retryDelay);\n                }\n            });\n\n            this.socket.on('error', (error) => {\n                console.error('Socket error:', error);\n                this.emitError(error);\n            });\n\n            // Add connection state logging\n            this.socket.io.on('ping', () => {\n                console.log('Socket ping sent');\n            });\n\n            this.socket.io.on('pong', (latency) => {\n                console.log('Socket pong received, latency:', latency, 'ms');\n            });\n\n        } catch (error) {\n            console.error('Error creating socket connection:', error);\n            this.handleConnectionError(error);\n        }\n    }\n\n    startDataRefresh() {\n        // Clear any existing interval\n        this.stopDataRefresh();\n        \n        // Request initial data\n        this.requestLiveMatches();\n        \n        // Set up periodic refresh\n        this.dataRefreshInterval = setInterval(() => {\n            if (this.socket?.connected) {\n                this.requestLiveMatches();\n            }\n        }, 30000); // Refresh every 30 seconds\n    }\n\n    stopDataRefresh() {\n        if (this.dataRefreshInterval) {\n            clearInterval(this.dataRefreshInterval);\n            this.dataRefreshInterval = null;\n        }\n    }\n\n    detectDevice() {\n        const userAgent = navigator.userAgent || navigator.vendor || window.opera;\n        if (/android|iPad|iPhone|iPod/i.test(userAgent)) {\n            return 'mobile';\n        }\n        return 'desktop';\n    }\n\n    handleConnectionError(error) {\n        this.connectionAttempts++;\n        this.isConnecting = false;\n        \n        console.log(`Connection attempt ${this.connectionAttempts} failed:`, error.message);\n        \n        if (this.connectionAttempts >= this.maxRetries) {\n            console.error('Max retries reached');\n            this.emitError({\n                type: 'CONNECTION_ERROR',\n                message: 'Unable to connect to the server. Please check your internet connection.'\n            });\n        } else {\n            setTimeout(() => this.connect(), this.retryDelay);\n        }\n    }\n\n    disconnect() {\n        this.stopDataRefresh();\n        if (this.socket) {\n            this.socket.disconnect();\n            this.socket = null;\n        }\n        this.isConnecting = false;\n        this.connectionAttempts = 0;\n    }\n\n    subscribe(event, callback) {\n        if (!this.socket) {\n            console.error('Socket not connected');\n            return;\n        }\n        this.socket.on(event, callback);\n    }\n\n    unsubscribe(event) {\n        if (!this.socket) return;\n        this.socket.off(event);\n    }\n\n    emitError(error) {\n        if (this.socket) {\n            this.socket.emit('client_error', error);\n        }\n    }\n\n    requestLiveMatches() {\n        if (!this.socket?.connected) {\n            console.error('Cannot request matches: Socket not connected');\n            this.connect();\n            return;\n        }\n        console.log('Requesting live matches from server');\n        this.socket.emit('request_live_matches');\n    }\n\n    subscribeToMatch(matchId) {\n        if (!this.socket) this.connect();\n        console.log('Subscribing to match:', matchId);\n        this.socket.emit('subscribe_match', matchId);\n    }\n\n    unsubscribeFromMatch(matchId) {\n        if (!this.socket) return;\n        console.log('Unsubscribing from match:', matchId);\n        this.socket.emit('unsubscribe_match', matchId);\n    }\n}\n\nexport default new SocketService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}