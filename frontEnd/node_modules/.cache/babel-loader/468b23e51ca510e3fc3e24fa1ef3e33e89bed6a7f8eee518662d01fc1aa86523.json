{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\n\n/**\r\n * Get paginated news articles\r\n * @param {number} page - Page number\r\n * @param {number} limit - Number of articles per page\r\n * @returns {Promise} - API response\r\n */\nexport const getAllNews = async (page = 1, limit = 10) => {\n  try {\n    const response = await axios.get(`${API_URL}/news?page=${page}&limit=${limit}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching news:', error.response || error);\n    throw error;\n  }\n};\n\n/**\r\n * Get a specific news article by ID\r\n * @param {string} newsId - News article ID\r\n * @returns {Promise} - API response\r\n */\nexport const getNewsById = async newsId => {\n  try {\n    const response = await axios.get(`${API_URL}/news/${newsId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching news article:', error.response || error);\n    throw error;\n  }\n};\n\n/**\r\n * Get news articles by category\r\n * @param {string} category - Category to filter by\r\n * @param {number} page - Page number\r\n * @param {number} limit - Number of articles per page\r\n * @returns {Promise} - API response\r\n */\nexport const getNewsByCategory = async (category, page = 1, limit = 10) => {\n  try {\n    const response = await axios.get(`${API_URL}/news/category/${category}?page=${page}&limit=${limit}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching news by category:', error.response || error);\n    throw error;\n  }\n};\n\n/**\r\n * Get news articles related to a specific team\r\n * @param {string} teamId - Team ID\r\n * @param {number} page - Page number\r\n * @param {number} limit - Number of articles per page\r\n * @returns {Promise} - API response\r\n */\nexport const getNewsByTeam = async (teamId, page = 1, limit = 10) => {\n  try {\n    const response = await axios.get(`${API_URL}/news/team/${teamId}?page=${page}&limit=${limit}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching team news:', error.response || error);\n    throw error;\n  }\n};\n\n/**\r\n * Search news articles by keyword\r\n * @param {string} query - Search query\r\n * @param {number} page - Page number\r\n * @param {number} limit - Number of articles per page\r\n * @returns {Promise} - API response\r\n */\nexport const searchNews = async (query, page = 1, limit = 10) => {\n  try {\n    const response = await axios.get(`${API_URL}/news/search?query=${encodeURIComponent(query)}&page=${page}&limit=${limit}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error searching news:', error.response || error);\n    throw error;\n  }\n};\n\n/**\r\n * Fetch the latest 3-4 news articles for featured display\r\n * @param {number} limit - Number of articles to fetch\r\n * @returns {Promise} - API response with limited articles\r\n */\nexport const getFeaturedNews = async (limit = 4) => {\n  try {\n    const response = await axios.get(`${API_URL}/news?page=1&limit=${limit}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching featured news:', error.response || error);\n    throw error;\n  }\n};\n\n/**\r\n * Get related news articles based on tags and category\r\n * @param {string} articleId - Current article ID to exclude\r\n * @param {Array} tags - Tags to match\r\n * @param {string} category - Category to match\r\n * @param {number} limit - Number of related articles to fetch\r\n * @returns {Promise} - API response with related articles\r\n */\nexport const getRelatedNews = async (articleId, tags = [], category, limit = 3) => {\n  try {\n    // Convert tags array to comma-separated string\n    const tagsParam = tags && tags.length > 0 ? tags.join(',') : '';\n\n    // Build URL with query parameters\n    let url = `${API_URL}/news/related?`;\n    if (articleId) url += `exclude=${articleId}&`;\n    if (tagsParam) url += `tags=${encodeURIComponent(tagsParam)}&`;\n    if (category) url += `category=${encodeURIComponent(category)}&`;\n    url += `limit=${limit}`;\n    const response = await axios.get(url);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching related news:', error.response || error);\n    // Return empty data instead of throwing to prevent component errors\n    return {\n      success: false,\n      data: [],\n      message: error.message\n    };\n  }\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","getAllNews","page","limit","response","get","data","error","console","getNewsById","newsId","getNewsByCategory","category","getNewsByTeam","teamId","searchNews","query","encodeURIComponent","getFeaturedNews","getRelatedNews","articleId","tags","tagsParam","length","join","url","success","message"],"sources":["E:/Muqtasid BS Computer Science/SPRING-25/Project/ballinfo/frontend/src/services/newsService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\r\n\r\n/**\r\n * Get paginated news articles\r\n * @param {number} page - Page number\r\n * @param {number} limit - Number of articles per page\r\n * @returns {Promise} - API response\r\n */\r\nexport const getAllNews = async (page = 1, limit = 10) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/news?page=${page}&limit=${limit}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching news:', error.response || error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Get a specific news article by ID\r\n * @param {string} newsId - News article ID\r\n * @returns {Promise} - API response\r\n */\r\nexport const getNewsById = async (newsId) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/news/${newsId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching news article:', error.response || error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Get news articles by category\r\n * @param {string} category - Category to filter by\r\n * @param {number} page - Page number\r\n * @param {number} limit - Number of articles per page\r\n * @returns {Promise} - API response\r\n */\r\nexport const getNewsByCategory = async (category, page = 1, limit = 10) => {\r\n  try {\r\n    const response = await axios.get(\r\n      `${API_URL}/news/category/${category}?page=${page}&limit=${limit}`\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching news by category:', error.response || error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Get news articles related to a specific team\r\n * @param {string} teamId - Team ID\r\n * @param {number} page - Page number\r\n * @param {number} limit - Number of articles per page\r\n * @returns {Promise} - API response\r\n */\r\nexport const getNewsByTeam = async (teamId, page = 1, limit = 10) => {\r\n  try {\r\n    const response = await axios.get(\r\n      `${API_URL}/news/team/${teamId}?page=${page}&limit=${limit}`\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching team news:', error.response || error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Search news articles by keyword\r\n * @param {string} query - Search query\r\n * @param {number} page - Page number\r\n * @param {number} limit - Number of articles per page\r\n * @returns {Promise} - API response\r\n */\r\nexport const searchNews = async (query, page = 1, limit = 10) => {\r\n  try {\r\n    const response = await axios.get(\r\n      `${API_URL}/news/search?query=${encodeURIComponent(query)}&page=${page}&limit=${limit}`\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error searching news:', error.response || error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Fetch the latest 3-4 news articles for featured display\r\n * @param {number} limit - Number of articles to fetch\r\n * @returns {Promise} - API response with limited articles\r\n */\r\nexport const getFeaturedNews = async (limit = 4) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/news?page=1&limit=${limit}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching featured news:', error.response || error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Get related news articles based on tags and category\r\n * @param {string} articleId - Current article ID to exclude\r\n * @param {Array} tags - Tags to match\r\n * @param {string} category - Category to match\r\n * @param {number} limit - Number of related articles to fetch\r\n * @returns {Promise} - API response with related articles\r\n */\r\nexport const getRelatedNews = async (articleId, tags = [], category, limit = 3) => {\r\n  try {\r\n    // Convert tags array to comma-separated string\r\n    const tagsParam = tags && tags.length > 0 ? tags.join(',') : '';\r\n    \r\n    // Build URL with query parameters\r\n    let url = `${API_URL}/news/related?`;\r\n    if (articleId) url += `exclude=${articleId}&`;\r\n    if (tagsParam) url += `tags=${encodeURIComponent(tagsParam)}&`;\r\n    if (category) url += `category=${encodeURIComponent(category)}&`;\r\n    url += `limit=${limit}`;\r\n    \r\n    const response = await axios.get(url);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching related news:', error.response || error);\r\n    // Return empty data instead of throwing to prevent component errors\r\n    return { success: false, data: [], message: error.message };\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}