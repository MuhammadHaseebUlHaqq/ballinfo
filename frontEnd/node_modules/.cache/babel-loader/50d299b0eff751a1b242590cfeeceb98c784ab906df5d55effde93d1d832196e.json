{"ast":null,"code":"import { io } from 'socket.io-client';\nclass SocketService {\n  constructor() {\n    this.socket = null;\n    this.listeners = new Map();\n    this.connectionAttempts = 0;\n    this.maxRetries = 3;\n    this.debug = true; // Enable debug logging\n  }\n  connect() {\n    if (this.socket) return;\n\n    // Use window.location.origin if REACT_APP_API_URL is not set\n    const serverUrl = process.env.REACT_APP_API_URL || window.location.origin;\n    if (this.debug) console.log('Attempting to connect to:', serverUrl);\n    this.socket = io(serverUrl, {\n      reconnectionDelay: 1000,\n      reconnection: true,\n      reconnectionAttempts: 5,\n      transports: ['polling', 'websocket'],\n      // Try polling first\n      timeout: 10000,\n      forceNew: true,\n      autoConnect: true\n    });\n    this.setupConnectionHandlers();\n  }\n  setupConnectionHandlers() {\n    this.socket.on('connect', () => {\n      console.log('Socket connected successfully');\n      this.connectionAttempts = 0;\n\n      // Explicitly request live matches after connection\n      this.socket.emit('request_live_matches');\n    });\n    this.socket.on('connect_error', error => {\n      console.error('Socket connection error:', error);\n      this.connectionAttempts++;\n      if (this.connectionAttempts >= this.maxRetries) {\n        const errorMessage = {\n          type: 'CONNECTION_ERROR',\n          message: `Unable to connect to the server (${error.message}). Please check your internet connection.`\n        };\n        console.error('Max retries reached:', errorMessage);\n        this.socket.emit('error', errorMessage);\n      }\n    });\n    this.socket.on('disconnect', reason => {\n      console.log('Socket disconnected. Reason:', reason);\n      if (reason === 'io server disconnect' || reason === 'transport close') {\n        console.log('Attempting to reconnect...');\n        this.socket.connect();\n      }\n    });\n    this.socket.on('error', error => {\n      console.error('Socket error event:', error);\n      // Propagate error to listeners\n      const callback = this.listeners.get('error');\n      if (callback) {\n        callback(error);\n      }\n    });\n\n    // Add ping/pong monitoring\n    this.socket.on('ping', () => {\n      if (this.debug) console.log('Socket ping');\n    });\n    this.socket.on('pong', latency => {\n      if (this.debug) console.log('Socket pong, latency:', latency);\n    });\n  }\n  disconnect() {\n    if (this.socket) {\n      console.log('Disconnecting socket...');\n      this.socket.disconnect();\n      this.socket = null;\n      this.connectionAttempts = 0;\n    }\n  }\n  subscribe(event, callback) {\n    if (!this.socket) {\n      console.log('No socket connection, attempting to connect...');\n      this.connect();\n    }\n    console.log('Subscribing to event:', event);\n    this.socket.on(event, data => {\n      console.log(`Received ${event} event:`, data);\n      callback(data);\n    });\n    this.listeners.set(event, callback);\n  }\n  unsubscribe(event) {\n    if (!this.socket) return;\n    console.log('Unsubscribing from event:', event);\n    const callback = this.listeners.get(event);\n    if (callback) {\n      this.socket.off(event, callback);\n      this.listeners.delete(event);\n    }\n  }\n  subscribeToMatch(matchId) {\n    if (!this.socket) this.connect();\n    console.log('Subscribing to match:', matchId);\n    this.socket.emit('subscribe_match', matchId);\n  }\n  unsubscribeFromMatch(matchId) {\n    if (!this.socket) return;\n    console.log('Unsubscribing from match:', matchId);\n    this.socket.emit('unsubscribe_match', matchId);\n  }\n}\nexport default new SocketService();","map":{"version":3,"names":["io","SocketService","constructor","socket","listeners","Map","connectionAttempts","maxRetries","debug","connect","serverUrl","process","env","REACT_APP_API_URL","window","location","origin","console","log","reconnectionDelay","reconnection","reconnectionAttempts","transports","timeout","forceNew","autoConnect","setupConnectionHandlers","on","emit","error","errorMessage","type","message","reason","callback","get","latency","disconnect","subscribe","event","data","set","unsubscribe","off","delete","subscribeToMatch","matchId","unsubscribeFromMatch"],"sources":["E:/Muqtasid BS Computer Science/SPRING-25/Project/ballinfo/frontEnd/src/services/socketService.js"],"sourcesContent":["import { io } from 'socket.io-client';\n\nclass SocketService {\n    constructor() {\n        this.socket = null;\n        this.listeners = new Map();\n        this.connectionAttempts = 0;\n        this.maxRetries = 3;\n        this.debug = true; // Enable debug logging\n    }\n\n    connect() {\n        if (this.socket) return;\n\n        // Use window.location.origin if REACT_APP_API_URL is not set\n        const serverUrl = process.env.REACT_APP_API_URL || window.location.origin;\n        \n        if (this.debug) console.log('Attempting to connect to:', serverUrl);\n\n        this.socket = io(serverUrl, {\n            reconnectionDelay: 1000,\n            reconnection: true,\n            reconnectionAttempts: 5,\n            transports: ['polling', 'websocket'], // Try polling first\n            timeout: 10000,\n            forceNew: true,\n            autoConnect: true\n        });\n\n        this.setupConnectionHandlers();\n    }\n\n    setupConnectionHandlers() {\n        this.socket.on('connect', () => {\n            console.log('Socket connected successfully');\n            this.connectionAttempts = 0;\n            \n            // Explicitly request live matches after connection\n            this.socket.emit('request_live_matches');\n        });\n\n        this.socket.on('connect_error', (error) => {\n            console.error('Socket connection error:', error);\n            this.connectionAttempts++;\n            \n            if (this.connectionAttempts >= this.maxRetries) {\n                const errorMessage = {\n                    type: 'CONNECTION_ERROR',\n                    message: `Unable to connect to the server (${error.message}). Please check your internet connection.`\n                };\n                console.error('Max retries reached:', errorMessage);\n                this.socket.emit('error', errorMessage);\n            }\n        });\n\n        this.socket.on('disconnect', (reason) => {\n            console.log('Socket disconnected. Reason:', reason);\n            \n            if (reason === 'io server disconnect' || reason === 'transport close') {\n                console.log('Attempting to reconnect...');\n                this.socket.connect();\n            }\n        });\n\n        this.socket.on('error', (error) => {\n            console.error('Socket error event:', error);\n            // Propagate error to listeners\n            const callback = this.listeners.get('error');\n            if (callback) {\n                callback(error);\n            }\n        });\n\n        // Add ping/pong monitoring\n        this.socket.on('ping', () => {\n            if (this.debug) console.log('Socket ping');\n        });\n\n        this.socket.on('pong', (latency) => {\n            if (this.debug) console.log('Socket pong, latency:', latency);\n        });\n    }\n\n    disconnect() {\n        if (this.socket) {\n            console.log('Disconnecting socket...');\n            this.socket.disconnect();\n            this.socket = null;\n            this.connectionAttempts = 0;\n        }\n    }\n\n    subscribe(event, callback) {\n        if (!this.socket) {\n            console.log('No socket connection, attempting to connect...');\n            this.connect();\n        }\n\n        console.log('Subscribing to event:', event);\n        this.socket.on(event, (data) => {\n            console.log(`Received ${event} event:`, data);\n            callback(data);\n        });\n        this.listeners.set(event, callback);\n    }\n\n    unsubscribe(event) {\n        if (!this.socket) return;\n\n        console.log('Unsubscribing from event:', event);\n        const callback = this.listeners.get(event);\n        if (callback) {\n            this.socket.off(event, callback);\n            this.listeners.delete(event);\n        }\n    }\n\n    subscribeToMatch(matchId) {\n        if (!this.socket) this.connect();\n        console.log('Subscribing to match:', matchId);\n        this.socket.emit('subscribe_match', matchId);\n    }\n\n    unsubscribeFromMatch(matchId) {\n        if (!this.socket) return;\n        console.log('Unsubscribing from match:', matchId);\n        this.socket.emit('unsubscribe_match', matchId);\n    }\n}\n\nexport default new SocketService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}