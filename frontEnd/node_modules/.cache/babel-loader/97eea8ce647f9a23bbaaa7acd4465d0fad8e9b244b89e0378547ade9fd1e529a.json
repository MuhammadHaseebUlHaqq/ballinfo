{"ast":null,"code":"import{io}from'socket.io-client';class SocketService{constructor(){this.socket=null;this.listeners=new Map();this.connectionAttempts=0;this.maxRetries=3;this.debug=true;this.isConnecting=false;this.reconnectTimer=null;}connect(){if(this.socket||this.isConnecting)return;this.isConnecting=true;const serverUrl=process.env.REACT_APP_API_URL||'http://localhost:3000';const isMobile=this.detectDevice()==='mobile';console.log('Attempting to connect to:',serverUrl,'Device type:',this.detectDevice());try{this.socket=io(serverUrl,{reconnectionDelay:isMobile?2000:1000,reconnection:true,reconnectionAttempts:isMobile?5:10,transports:isMobile?['polling']:['polling','websocket'],upgrade:!isMobile,rememberUpgrade:!isMobile,timeout:isMobile?60000:30000,withCredentials:true,autoConnect:true,forceNew:false,path:'/socket.io',query:{device:this.detectDevice(),timestamp:Date.now(),transport:isMobile?'polling':'any'},extraHeaders:{'X-Client-Info':this.detectDevice(),'X-Requested-Transport':isMobile?'polling':'any'},polling:{extraHeaders:{'X-Transport':'polling'}}});// Add connection state logging\nthis.socket.io.on('ping',()=>{console.log('Socket ping sent');});this.socket.io.on('pong',latency=>{console.log('Socket pong received, latency:',latency,'ms');});this.setupConnectionHandlers();}catch(error){console.error('Error creating socket connection:',error);this.handleConnectionError(error);}}setupConnectionHandlers(){if(!this.socket)return;this.socket.on('connect',()=>{const transport=this.socket.io.engine.transport.name;console.log('Socket connected successfully.',{transport:transport,id:this.socket.id,device:this.detectDevice()});this.connectionAttempts=0;this.isConnecting=false;clearTimeout(this.reconnectTimer);// Request live matches immediately after connection\nthis.requestLiveMatches();});this.socket.on('connect_error',error=>{console.error('Socket connection error:',error);this.handleConnectionError(error);});this.socket.on('disconnect',reason=>{console.log('Socket disconnected. Reason:',reason);this.isConnecting=false;if(reason==='io server disconnect'||reason==='transport close'){this.handleReconnect();}});this.socket.on('error',error=>{console.error('Socket error event:',error);this.emitError(error);});// Monitor connection state\nthis.socket.io.on('reconnect_attempt',attempt=>{console.log(`Reconnection attempt ${attempt}`);});this.socket.io.on('reconnect_failed',()=>{console.log('Reconnection failed');this.handleConnectionError(new Error('Reconnection failed'));});}detectDevice(){const userAgent=navigator.userAgent||navigator.vendor||window.opera;const isMobile=/android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(userAgent.toLowerCase());return isMobile?'mobile':'desktop';}handleConnectionError(error){this.connectionAttempts++;this.isConnecting=false;console.log(`Connection attempt ${this.connectionAttempts} failed:`,error.message);// Check if the error is related to XHR polling\nconst isXHRError=error.message.toLowerCase().includes('xhr')||error.message.toLowerCase().includes('polling');if(isXHRError){// Try to force polling transport on XHR errors\nif(this.socket){this.socket.io.opts.transports=['polling'];console.log('Forcing polling transport due to XHR error');}}if(this.connectionAttempts>=this.maxRetries){const errorMessage={type:'CONNECTION_ERROR',message:`Unable to connect to the server (${error.message}). Please check your internet connection.`,isXHRError:isXHRError};console.error('Max retries reached:',errorMessage);this.emitError(errorMessage);}else{this.handleReconnect();}}handleReconnect(){console.log('Attempting to reconnect...');clearTimeout(this.reconnectTimer);const backoffDelay=Math.min(2000*Math.pow(2,this.connectionAttempts-1),10000);this.reconnectTimer=setTimeout(()=>{if(this.socket){// Try to reconnect with current socket\nthis.socket.connect();}else{// Create new connection\nthis.connect();}},backoffDelay);}requestLiveMatches(){if(!this.socket){console.error('Cannot request matches: No socket connection');return;}console.log('Requesting live matches from server');this.socket.emit('request_live_matches');}emitError(error){const callback=this.listeners.get('error');if(callback){callback(error);}}disconnect(){clearTimeout(this.reconnectTimer);if(this.socket){console.log('Disconnecting socket...');this.socket.disconnect();this.socket=null;this.connectionAttempts=0;this.isConnecting=false;}}subscribe(event,callback){if(!this.socket){console.log('No socket connection, attempting to connect...');this.connect();}console.log('Subscribing to event:',event);this.socket.on(event,data=>{console.log(`Received ${event} event:`,data);callback(data);});this.listeners.set(event,callback);}unsubscribe(event){if(!this.socket)return;console.log('Unsubscribing from event:',event);const callback=this.listeners.get(event);if(callback){this.socket.off(event,callback);this.listeners.delete(event);}}subscribeToMatch(matchId){if(!this.socket)this.connect();console.log('Subscribing to match:',matchId);this.socket.emit('subscribe_match',matchId);}unsubscribeFromMatch(matchId){if(!this.socket)return;console.log('Unsubscribing from match:',matchId);this.socket.emit('unsubscribe_match',matchId);}}export default new SocketService();","map":{"version":3,"names":["io","SocketService","constructor","socket","listeners","Map","connectionAttempts","maxRetries","debug","isConnecting","reconnectTimer","connect","serverUrl","process","env","REACT_APP_API_URL","isMobile","detectDevice","console","log","reconnectionDelay","reconnection","reconnectionAttempts","transports","upgrade","rememberUpgrade","timeout","withCredentials","autoConnect","forceNew","path","query","device","timestamp","Date","now","transport","extraHeaders","polling","on","latency","setupConnectionHandlers","error","handleConnectionError","engine","name","id","clearTimeout","requestLiveMatches","reason","handleReconnect","emitError","attempt","Error","userAgent","navigator","vendor","window","opera","test","toLowerCase","message","isXHRError","includes","opts","errorMessage","type","backoffDelay","Math","min","pow","setTimeout","emit","callback","get","disconnect","subscribe","event","data","set","unsubscribe","off","delete","subscribeToMatch","matchId","unsubscribeFromMatch"],"sources":["E:/Muqtasid BS Computer Science/SPRING-25/Project/ballinfo/frontEnd/src/services/socketService.js"],"sourcesContent":["import { io } from 'socket.io-client';\n\nclass SocketService {\n    constructor() {\n        this.socket = null;\n        this.listeners = new Map();\n        this.connectionAttempts = 0;\n        this.maxRetries = 3;\n        this.debug = true;\n        this.isConnecting = false;\n        this.reconnectTimer = null;\n    }\n\n    connect() {\n        if (this.socket || this.isConnecting) return;\n\n        this.isConnecting = true;\n        const serverUrl = process.env.REACT_APP_API_URL || 'http://localhost:3000';\n        const isMobile = this.detectDevice() === 'mobile';\n        \n        console.log('Attempting to connect to:', serverUrl, 'Device type:', this.detectDevice());\n\n        try {\n            this.socket = io(serverUrl, {\n                reconnectionDelay: isMobile ? 2000 : 1000,\n                reconnection: true,\n                reconnectionAttempts: isMobile ? 5 : 10,\n                transports: isMobile ? ['polling'] : ['polling', 'websocket'],\n                upgrade: !isMobile,\n                rememberUpgrade: !isMobile,\n                timeout: isMobile ? 60000 : 30000,\n                withCredentials: true,\n                autoConnect: true,\n                forceNew: false,\n                path: '/socket.io',\n                query: {\n                    device: this.detectDevice(),\n                    timestamp: Date.now(),\n                    transport: isMobile ? 'polling' : 'any'\n                },\n                extraHeaders: {\n                    'X-Client-Info': this.detectDevice(),\n                    'X-Requested-Transport': isMobile ? 'polling' : 'any'\n                },\n                polling: {\n                    extraHeaders: {\n                        'X-Transport': 'polling'\n                    }\n                }\n            });\n\n            // Add connection state logging\n            this.socket.io.on('ping', () => {\n                console.log('Socket ping sent');\n            });\n\n            this.socket.io.on('pong', (latency) => {\n                console.log('Socket pong received, latency:', latency, 'ms');\n            });\n\n            this.setupConnectionHandlers();\n        } catch (error) {\n            console.error('Error creating socket connection:', error);\n            this.handleConnectionError(error);\n        }\n    }\n\n    setupConnectionHandlers() {\n        if (!this.socket) return;\n\n        this.socket.on('connect', () => {\n            const transport = this.socket.io.engine.transport.name;\n            console.log('Socket connected successfully.', {\n                transport: transport,\n                id: this.socket.id,\n                device: this.detectDevice()\n            });\n            \n            this.connectionAttempts = 0;\n            this.isConnecting = false;\n            clearTimeout(this.reconnectTimer);\n            \n            // Request live matches immediately after connection\n            this.requestLiveMatches();\n        });\n\n        this.socket.on('connect_error', (error) => {\n            console.error('Socket connection error:', error);\n            this.handleConnectionError(error);\n        });\n\n        this.socket.on('disconnect', (reason) => {\n            console.log('Socket disconnected. Reason:', reason);\n            this.isConnecting = false;\n            \n            if (reason === 'io server disconnect' || reason === 'transport close') {\n                this.handleReconnect();\n            }\n        });\n\n        this.socket.on('error', (error) => {\n            console.error('Socket error event:', error);\n            this.emitError(error);\n        });\n\n        // Monitor connection state\n        this.socket.io.on('reconnect_attempt', (attempt) => {\n            console.log(`Reconnection attempt ${attempt}`);\n        });\n\n        this.socket.io.on('reconnect_failed', () => {\n            console.log('Reconnection failed');\n            this.handleConnectionError(new Error('Reconnection failed'));\n        });\n    }\n\n    detectDevice() {\n        const userAgent = navigator.userAgent || navigator.vendor || window.opera;\n        const isMobile = /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(userAgent.toLowerCase());\n        return isMobile ? 'mobile' : 'desktop';\n    }\n\n    handleConnectionError(error) {\n        this.connectionAttempts++;\n        this.isConnecting = false;\n        \n        console.log(`Connection attempt ${this.connectionAttempts} failed:`, error.message);\n        \n        // Check if the error is related to XHR polling\n        const isXHRError = error.message.toLowerCase().includes('xhr') || \n                          error.message.toLowerCase().includes('polling');\n        \n        if (isXHRError) {\n            // Try to force polling transport on XHR errors\n            if (this.socket) {\n                this.socket.io.opts.transports = ['polling'];\n                console.log('Forcing polling transport due to XHR error');\n            }\n        }\n        \n        if (this.connectionAttempts >= this.maxRetries) {\n            const errorMessage = {\n                type: 'CONNECTION_ERROR',\n                message: `Unable to connect to the server (${error.message}). Please check your internet connection.`,\n                isXHRError: isXHRError\n            };\n            console.error('Max retries reached:', errorMessage);\n            this.emitError(errorMessage);\n        } else {\n            this.handleReconnect();\n        }\n    }\n\n    handleReconnect() {\n        console.log('Attempting to reconnect...');\n        clearTimeout(this.reconnectTimer);\n        \n        const backoffDelay = Math.min(2000 * Math.pow(2, this.connectionAttempts - 1), 10000);\n        \n        this.reconnectTimer = setTimeout(() => {\n            if (this.socket) {\n                // Try to reconnect with current socket\n                this.socket.connect();\n            } else {\n                // Create new connection\n                this.connect();\n            }\n        }, backoffDelay);\n    }\n\n    requestLiveMatches() {\n        if (!this.socket) {\n            console.error('Cannot request matches: No socket connection');\n            return;\n        }\n        console.log('Requesting live matches from server');\n        this.socket.emit('request_live_matches');\n    }\n\n    emitError(error) {\n        const callback = this.listeners.get('error');\n        if (callback) {\n            callback(error);\n        }\n    }\n\n    disconnect() {\n        clearTimeout(this.reconnectTimer);\n        if (this.socket) {\n            console.log('Disconnecting socket...');\n            this.socket.disconnect();\n            this.socket = null;\n            this.connectionAttempts = 0;\n            this.isConnecting = false;\n        }\n    }\n\n    subscribe(event, callback) {\n        if (!this.socket) {\n            console.log('No socket connection, attempting to connect...');\n            this.connect();\n        }\n\n        console.log('Subscribing to event:', event);\n        this.socket.on(event, (data) => {\n            console.log(`Received ${event} event:`, data);\n            callback(data);\n        });\n        this.listeners.set(event, callback);\n    }\n\n    unsubscribe(event) {\n        if (!this.socket) return;\n\n        console.log('Unsubscribing from event:', event);\n        const callback = this.listeners.get(event);\n        if (callback) {\n            this.socket.off(event, callback);\n            this.listeners.delete(event);\n        }\n    }\n\n    subscribeToMatch(matchId) {\n        if (!this.socket) this.connect();\n        console.log('Subscribing to match:', matchId);\n        this.socket.emit('subscribe_match', matchId);\n    }\n\n    unsubscribeFromMatch(matchId) {\n        if (!this.socket) return;\n        console.log('Unsubscribing from match:', matchId);\n        this.socket.emit('unsubscribe_match', matchId);\n    }\n}\n\nexport default new SocketService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}