{"ast":null,"code":"import { io } from 'socket.io-client';\nclass SocketService {\n  constructor() {\n    this.socket = null;\n    this.listeners = new Map();\n    this.connectionAttempts = 0;\n    this.maxRetries = 3;\n  }\n  connect() {\n    if (this.socket) return;\n    const serverUrl = process.env.REACT_APP_API_URL || 'http://localhost:3000';\n    this.socket = io(serverUrl, {\n      reconnectionDelay: 1000,\n      reconnection: true,\n      reconnectionAttempts: 5,\n      transports: ['websocket', 'polling'],\n      // Allow fallback to polling\n      timeout: 10000,\n      forceNew: true\n    });\n    this.setupConnectionHandlers();\n  }\n  setupConnectionHandlers() {\n    this.socket.on('connect', () => {\n      console.log('Connected to WebSocket server');\n      this.connectionAttempts = 0;\n    });\n    this.socket.on('connect_error', error => {\n      console.error('Connection error:', error);\n      this.connectionAttempts++;\n      if (this.connectionAttempts >= this.maxRetries) {\n        this.socket.emit('error', {\n          type: 'CONNECTION_ERROR',\n          message: 'Unable to connect to the server. Please check your internet connection.'\n        });\n      }\n    });\n    this.socket.on('disconnect', reason => {\n      console.log('Disconnected from WebSocket server:', reason);\n      if (reason === 'io server disconnect') {\n        // Server disconnected, try to reconnect\n        this.socket.connect();\n      }\n    });\n    this.socket.on('error', error => {\n      console.error('Socket error:', error);\n    });\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n      this.connectionAttempts = 0;\n    }\n  }\n  subscribe(event, callback) {\n    if (!this.socket) this.connect();\n    this.socket.on(event, callback);\n    this.listeners.set(event, callback);\n  }\n  unsubscribe(event) {\n    if (!this.socket) return;\n    const callback = this.listeners.get(event);\n    if (callback) {\n      this.socket.off(event, callback);\n      this.listeners.delete(event);\n    }\n  }\n  subscribeToMatch(matchId) {\n    if (!this.socket) this.connect();\n    this.socket.emit('subscribe_match', matchId);\n  }\n  unsubscribeFromMatch(matchId) {\n    if (!this.socket) return;\n    this.socket.emit('unsubscribe_match', matchId);\n  }\n}\nexport default new SocketService();","map":{"version":3,"names":["io","SocketService","constructor","socket","listeners","Map","connectionAttempts","maxRetries","connect","serverUrl","process","env","REACT_APP_API_URL","reconnectionDelay","reconnection","reconnectionAttempts","transports","timeout","forceNew","setupConnectionHandlers","on","console","log","error","emit","type","message","reason","disconnect","subscribe","event","callback","set","unsubscribe","get","off","delete","subscribeToMatch","matchId","unsubscribeFromMatch"],"sources":["E:/Muqtasid BS Computer Science/SPRING-25/Project/ballinfo/frontEnd/src/services/socketService.js"],"sourcesContent":["import { io } from 'socket.io-client';\n\nclass SocketService {\n    constructor() {\n        this.socket = null;\n        this.listeners = new Map();\n        this.connectionAttempts = 0;\n        this.maxRetries = 3;\n    }\n\n    connect() {\n        if (this.socket) return;\n\n        const serverUrl = process.env.REACT_APP_API_URL || 'http://localhost:3000';\n        \n        this.socket = io(serverUrl, {\n            reconnectionDelay: 1000,\n            reconnection: true,\n            reconnectionAttempts: 5,\n            transports: ['websocket', 'polling'], // Allow fallback to polling\n            timeout: 10000,\n            forceNew: true\n        });\n\n        this.setupConnectionHandlers();\n    }\n\n    setupConnectionHandlers() {\n        this.socket.on('connect', () => {\n            console.log('Connected to WebSocket server');\n            this.connectionAttempts = 0;\n        });\n\n        this.socket.on('connect_error', (error) => {\n            console.error('Connection error:', error);\n            this.connectionAttempts++;\n            \n            if (this.connectionAttempts >= this.maxRetries) {\n                this.socket.emit('error', {\n                    type: 'CONNECTION_ERROR',\n                    message: 'Unable to connect to the server. Please check your internet connection.'\n                });\n            }\n        });\n\n        this.socket.on('disconnect', (reason) => {\n            console.log('Disconnected from WebSocket server:', reason);\n            if (reason === 'io server disconnect') {\n                // Server disconnected, try to reconnect\n                this.socket.connect();\n            }\n        });\n\n        this.socket.on('error', (error) => {\n            console.error('Socket error:', error);\n        });\n    }\n\n    disconnect() {\n        if (this.socket) {\n            this.socket.disconnect();\n            this.socket = null;\n            this.connectionAttempts = 0;\n        }\n    }\n\n    subscribe(event, callback) {\n        if (!this.socket) this.connect();\n\n        this.socket.on(event, callback);\n        this.listeners.set(event, callback);\n    }\n\n    unsubscribe(event) {\n        if (!this.socket) return;\n\n        const callback = this.listeners.get(event);\n        if (callback) {\n            this.socket.off(event, callback);\n            this.listeners.delete(event);\n        }\n    }\n\n    subscribeToMatch(matchId) {\n        if (!this.socket) this.connect();\n        this.socket.emit('subscribe_match', matchId);\n    }\n\n    unsubscribeFromMatch(matchId) {\n        if (!this.socket) return;\n        this.socket.emit('unsubscribe_match', matchId);\n    }\n}\n\nexport default new SocketService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}