{"ast":null,"code":"import { io } from 'socket.io-client';\nclass SocketService {\n  constructor() {\n    this.socket = null;\n    this.listeners = new Map();\n    this.connectionAttempts = 0;\n    this.maxAttempts = 3;\n  }\n  async connect() {\n    return new Promise((resolve, reject) => {\n      var _this$socket;\n      if ((_this$socket = this.socket) !== null && _this$socket !== void 0 && _this$socket.connected) {\n        resolve();\n        return;\n      }\n      if (this.connectionAttempts >= this.maxAttempts) {\n        reject(new Error('Maximum connection attempts reached'));\n        return;\n      }\n      this.socket = io(process.env.REACT_APP_API_URL || 'http://localhost:3000', {\n        reconnectionDelay: 1000,\n        reconnection: true,\n        reconnectionAttempts: 3,\n        transports: ['websocket', 'polling'],\n        // Try WebSocket first, fallback to polling\n        timeout: 10000,\n        // 10 second timeout\n        agent: false,\n        upgrade: true,\n        rejectUnauthorized: false\n      });\n      this.socket.on('connect', () => {\n        console.log('Connected to WebSocket server');\n        this.connectionAttempts = 0;\n        resolve();\n      });\n      this.socket.on('connect_error', error => {\n        console.error('Connection error:', error);\n        this.connectionAttempts++;\n        if (this.connectionAttempts >= this.maxAttempts) {\n          reject(error);\n        }\n      });\n      this.socket.on('disconnect', () => {\n        console.log('Disconnected from WebSocket server');\n      });\n      this.socket.on('error', error => {\n        console.error('Socket error:', error);\n        reject(error);\n      });\n\n      // Add a timeout for the connection attempt\n      setTimeout(() => {\n        if (!this.socket.connected) {\n          reject(new Error('Connection timeout'));\n        }\n      }, 10000);\n    });\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n      this.connectionAttempts = 0;\n    }\n  }\n  subscribe(event, callback) {\n    if (!this.socket) {\n      this.connect().catch(error => {\n        console.error('Failed to connect:', error);\n        if (event === 'error') {\n          callback({\n            message: 'Failed to connect to server'\n          });\n        }\n      });\n    }\n    this.socket.on(event, callback);\n    this.listeners.set(event, callback);\n  }\n  unsubscribe(event) {\n    if (!this.socket) return;\n    const callback = this.listeners.get(event);\n    if (callback) {\n      this.socket.off(event, callback);\n      this.listeners.delete(event);\n    }\n  }\n  subscribeToMatch(matchId) {\n    if (!this.socket) {\n      this.connect().catch(console.error);\n    }\n    this.socket.emit('subscribe_match', matchId);\n  }\n  unsubscribeFromMatch(matchId) {\n    if (!this.socket) return;\n    this.socket.emit('unsubscribe_match', matchId);\n  }\n}\nconst socketService = new SocketService();\nexport default socketService;","map":{"version":3,"names":["io","SocketService","constructor","socket","listeners","Map","connectionAttempts","maxAttempts","connect","Promise","resolve","reject","_this$socket","connected","Error","process","env","REACT_APP_API_URL","reconnectionDelay","reconnection","reconnectionAttempts","transports","timeout","agent","upgrade","rejectUnauthorized","on","console","log","error","setTimeout","disconnect","subscribe","event","callback","catch","message","set","unsubscribe","get","off","delete","subscribeToMatch","matchId","emit","unsubscribeFromMatch","socketService"],"sources":["E:/Muqtasid BS Computer Science/SPRING-25/Project/ballinfo/frontEnd/src/services/socketService.js"],"sourcesContent":["import { io } from 'socket.io-client';\n\nclass SocketService {\n    constructor() {\n        this.socket = null;\n        this.listeners = new Map();\n        this.connectionAttempts = 0;\n        this.maxAttempts = 3;\n    }\n\n    async connect() {\n        return new Promise((resolve, reject) => {\n            if (this.socket?.connected) {\n                resolve();\n                return;\n            }\n\n            if (this.connectionAttempts >= this.maxAttempts) {\n                reject(new Error('Maximum connection attempts reached'));\n                return;\n            }\n\n            this.socket = io(process.env.REACT_APP_API_URL || 'http://localhost:3000', {\n                reconnectionDelay: 1000,\n                reconnection: true,\n                reconnectionAttempts: 3,\n                transports: ['websocket', 'polling'], // Try WebSocket first, fallback to polling\n                timeout: 10000, // 10 second timeout\n                agent: false,\n                upgrade: true,\n                rejectUnauthorized: false\n            });\n\n            this.socket.on('connect', () => {\n                console.log('Connected to WebSocket server');\n                this.connectionAttempts = 0;\n                resolve();\n            });\n\n            this.socket.on('connect_error', (error) => {\n                console.error('Connection error:', error);\n                this.connectionAttempts++;\n                if (this.connectionAttempts >= this.maxAttempts) {\n                    reject(error);\n                }\n            });\n\n            this.socket.on('disconnect', () => {\n                console.log('Disconnected from WebSocket server');\n            });\n\n            this.socket.on('error', (error) => {\n                console.error('Socket error:', error);\n                reject(error);\n            });\n\n            // Add a timeout for the connection attempt\n            setTimeout(() => {\n                if (!this.socket.connected) {\n                    reject(new Error('Connection timeout'));\n                }\n            }, 10000);\n        });\n    }\n\n    disconnect() {\n        if (this.socket) {\n            this.socket.disconnect();\n            this.socket = null;\n            this.connectionAttempts = 0;\n        }\n    }\n\n    subscribe(event, callback) {\n        if (!this.socket) {\n            this.connect().catch(error => {\n                console.error('Failed to connect:', error);\n                if (event === 'error') {\n                    callback({ message: 'Failed to connect to server' });\n                }\n            });\n        }\n\n        this.socket.on(event, callback);\n        this.listeners.set(event, callback);\n    }\n\n    unsubscribe(event) {\n        if (!this.socket) return;\n\n        const callback = this.listeners.get(event);\n        if (callback) {\n            this.socket.off(event, callback);\n            this.listeners.delete(event);\n        }\n    }\n\n    subscribeToMatch(matchId) {\n        if (!this.socket) {\n            this.connect().catch(console.error);\n        }\n        this.socket.emit('subscribe_match', matchId);\n    }\n\n    unsubscribeFromMatch(matchId) {\n        if (!this.socket) return;\n        this.socket.emit('unsubscribe_match', matchId);\n    }\n}\n\nconst socketService = new SocketService();\nexport default socketService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}