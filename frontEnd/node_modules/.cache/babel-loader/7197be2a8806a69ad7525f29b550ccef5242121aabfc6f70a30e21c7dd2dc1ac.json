{"ast":null,"code":"import { io } from 'socket.io-client';\nclass SocketService {\n  constructor() {\n    this.socket = null;\n    this.listeners = new Map();\n    this.connectionAttempts = 0;\n    this.maxRetries = 3;\n    this.debug = true;\n    this.isConnecting = false;\n    this.reconnectTimer = null;\n  }\n  connect() {\n    if (this.socket || this.isConnecting) return;\n    this.isConnecting = true;\n    const serverUrl = process.env.REACT_APP_API_URL || window.location.origin;\n    const isMobile = this.detectDevice() === 'mobile';\n    console.log('Attempting to connect to:', serverUrl, 'Device type:', this.detectDevice());\n    try {\n      this.socket = io(serverUrl, {\n        reconnectionDelay: 1000,\n        reconnection: true,\n        reconnectionAttempts: 10,\n        transports: ['polling', 'websocket'],\n        upgrade: true,\n        rememberUpgrade: true,\n        timeout: 60000,\n        withCredentials: true,\n        autoConnect: true,\n        forceNew: false,\n        path: '/socket.io',\n        query: {\n          device: this.detectDevice(),\n          timestamp: Date.now()\n        }\n      });\n\n      // Add connection state logging\n      this.socket.io.on('ping', () => {\n        console.log('Socket ping sent');\n      });\n      this.socket.io.on('pong', latency => {\n        console.log('Socket pong received, latency:', latency, 'ms');\n      });\n      this.setupConnectionHandlers();\n    } catch (error) {\n      console.error('Error creating socket connection:', error);\n      this.handleConnectionError(error);\n    }\n  }\n  setupConnectionHandlers() {\n    if (!this.socket) return;\n    this.socket.on('connect', () => {\n      const transport = this.socket.io.engine.transport.name;\n      console.log('Socket connected successfully.', {\n        transport: transport,\n        id: this.socket.id,\n        device: this.detectDevice()\n      });\n      this.connectionAttempts = 0;\n      this.isConnecting = false;\n      clearTimeout(this.reconnectTimer);\n\n      // Request live matches immediately after connection\n      this.requestLiveMatches();\n    });\n    this.socket.on('connect_error', error => {\n      console.error('Socket connection error:', error);\n      this.handleConnectionError(error);\n    });\n    this.socket.on('disconnect', reason => {\n      console.log('Socket disconnected. Reason:', reason);\n      this.isConnecting = false;\n      if (reason === 'io server disconnect' || reason === 'transport close') {\n        this.handleReconnect();\n      }\n    });\n    this.socket.on('error', error => {\n      console.error('Socket error event:', error);\n      this.emitError(error);\n    });\n\n    // Monitor connection state\n    this.socket.io.on('reconnect_attempt', attempt => {\n      console.log(`Reconnection attempt ${attempt}`);\n    });\n    this.socket.io.on('reconnect_failed', () => {\n      console.log('Reconnection failed');\n      this.handleConnectionError(new Error('Reconnection failed'));\n    });\n  }\n  detectDevice() {\n    const userAgent = navigator.userAgent || navigator.vendor || window.opera;\n    const isMobile = /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(userAgent.toLowerCase());\n    return isMobile ? 'mobile' : 'desktop';\n  }\n  handleConnectionError(error) {\n    this.connectionAttempts++;\n    this.isConnecting = false;\n    console.log(`Connection attempt ${this.connectionAttempts} failed:`, error.message);\n\n    // Check if the error is related to XHR polling\n    const isXHRError = error.message.toLowerCase().includes('xhr') || error.message.toLowerCase().includes('polling');\n    if (isXHRError) {\n      // Try to force polling transport on XHR errors\n      if (this.socket) {\n        this.socket.io.opts.transports = ['polling'];\n        console.log('Forcing polling transport due to XHR error');\n      }\n    }\n    if (this.connectionAttempts >= this.maxRetries) {\n      const errorMessage = {\n        type: 'CONNECTION_ERROR',\n        message: `Unable to connect to the server (${error.message}). Please check your internet connection.`,\n        isXHRError: isXHRError\n      };\n      console.error('Max retries reached:', errorMessage);\n      this.emitError(errorMessage);\n    } else {\n      this.handleReconnect();\n    }\n  }\n  handleReconnect() {\n    console.log('Attempting to reconnect...');\n    clearTimeout(this.reconnectTimer);\n    const backoffDelay = Math.min(2000 * Math.pow(2, this.connectionAttempts - 1), 10000);\n    this.reconnectTimer = setTimeout(() => {\n      if (this.socket) {\n        // Try to reconnect with current socket\n        this.socket.connect();\n      } else {\n        // Create new connection\n        this.connect();\n      }\n    }, backoffDelay);\n  }\n  requestLiveMatches() {\n    if (!this.socket) {\n      console.error('Cannot request matches: No socket connection');\n      return;\n    }\n    console.log('Requesting live matches from server');\n    this.socket.emit('request_live_matches');\n  }\n  emitError(error) {\n    const callback = this.listeners.get('error');\n    if (callback) {\n      callback(error);\n    }\n  }\n  disconnect() {\n    clearTimeout(this.reconnectTimer);\n    if (this.socket) {\n      console.log('Disconnecting socket...');\n      this.socket.disconnect();\n      this.socket = null;\n      this.connectionAttempts = 0;\n      this.isConnecting = false;\n    }\n  }\n  subscribe(event, callback) {\n    if (!this.socket) {\n      console.log('No socket connection, attempting to connect...');\n      this.connect();\n    }\n    console.log('Subscribing to event:', event);\n    this.socket.on(event, data => {\n      console.log(`Received ${event} event:`, data);\n      callback(data);\n    });\n    this.listeners.set(event, callback);\n  }\n  unsubscribe(event) {\n    if (!this.socket) return;\n    console.log('Unsubscribing from event:', event);\n    const callback = this.listeners.get(event);\n    if (callback) {\n      this.socket.off(event, callback);\n      this.listeners.delete(event);\n    }\n  }\n  subscribeToMatch(matchId) {\n    if (!this.socket) this.connect();\n    console.log('Subscribing to match:', matchId);\n    this.socket.emit('subscribe_match', matchId);\n  }\n  unsubscribeFromMatch(matchId) {\n    if (!this.socket) return;\n    console.log('Unsubscribing from match:', matchId);\n    this.socket.emit('unsubscribe_match', matchId);\n  }\n}\nexport default new SocketService();","map":{"version":3,"names":["io","SocketService","constructor","socket","listeners","Map","connectionAttempts","maxRetries","debug","isConnecting","reconnectTimer","connect","serverUrl","process","env","REACT_APP_API_URL","window","location","origin","isMobile","detectDevice","console","log","reconnectionDelay","reconnection","reconnectionAttempts","transports","upgrade","rememberUpgrade","timeout","withCredentials","autoConnect","forceNew","path","query","device","timestamp","Date","now","on","latency","setupConnectionHandlers","error","handleConnectionError","transport","engine","name","id","clearTimeout","requestLiveMatches","reason","handleReconnect","emitError","attempt","Error","userAgent","navigator","vendor","opera","test","toLowerCase","message","isXHRError","includes","opts","errorMessage","type","backoffDelay","Math","min","pow","setTimeout","emit","callback","get","disconnect","subscribe","event","data","set","unsubscribe","off","delete","subscribeToMatch","matchId","unsubscribeFromMatch"],"sources":["E:/Muqtasid BS Computer Science/SPRING-25/Project/ballinfo/frontEnd/src/services/socketService.js"],"sourcesContent":["import { io } from 'socket.io-client';\n\nclass SocketService {\n    constructor() {\n        this.socket = null;\n        this.listeners = new Map();\n        this.connectionAttempts = 0;\n        this.maxRetries = 3;\n        this.debug = true;\n        this.isConnecting = false;\n        this.reconnectTimer = null;\n    }\n\n    connect() {\n        if (this.socket || this.isConnecting) return;\n\n        this.isConnecting = true;\n        const serverUrl = process.env.REACT_APP_API_URL || window.location.origin;\n        const isMobile = this.detectDevice() === 'mobile';\n        \n        console.log('Attempting to connect to:', serverUrl, 'Device type:', this.detectDevice());\n\n        try {\n            this.socket = io(serverUrl, {\n                reconnectionDelay: 1000,\n                reconnection: true,\n                reconnectionAttempts: 10,\n                transports: ['polling', 'websocket'],\n                upgrade: true,\n                rememberUpgrade: true,\n                timeout: 60000,\n                withCredentials: true,\n                autoConnect: true,\n                forceNew: false,\n                path: '/socket.io',\n                query: {\n                    device: this.detectDevice(),\n                    timestamp: Date.now()\n                }\n            });\n\n            // Add connection state logging\n            this.socket.io.on('ping', () => {\n                console.log('Socket ping sent');\n            });\n\n            this.socket.io.on('pong', (latency) => {\n                console.log('Socket pong received, latency:', latency, 'ms');\n            });\n\n            this.setupConnectionHandlers();\n        } catch (error) {\n            console.error('Error creating socket connection:', error);\n            this.handleConnectionError(error);\n        }\n    }\n\n    setupConnectionHandlers() {\n        if (!this.socket) return;\n\n        this.socket.on('connect', () => {\n            const transport = this.socket.io.engine.transport.name;\n            console.log('Socket connected successfully.', {\n                transport: transport,\n                id: this.socket.id,\n                device: this.detectDevice()\n            });\n            \n            this.connectionAttempts = 0;\n            this.isConnecting = false;\n            clearTimeout(this.reconnectTimer);\n            \n            // Request live matches immediately after connection\n            this.requestLiveMatches();\n        });\n\n        this.socket.on('connect_error', (error) => {\n            console.error('Socket connection error:', error);\n            this.handleConnectionError(error);\n        });\n\n        this.socket.on('disconnect', (reason) => {\n            console.log('Socket disconnected. Reason:', reason);\n            this.isConnecting = false;\n            \n            if (reason === 'io server disconnect' || reason === 'transport close') {\n                this.handleReconnect();\n            }\n        });\n\n        this.socket.on('error', (error) => {\n            console.error('Socket error event:', error);\n            this.emitError(error);\n        });\n\n        // Monitor connection state\n        this.socket.io.on('reconnect_attempt', (attempt) => {\n            console.log(`Reconnection attempt ${attempt}`);\n        });\n\n        this.socket.io.on('reconnect_failed', () => {\n            console.log('Reconnection failed');\n            this.handleConnectionError(new Error('Reconnection failed'));\n        });\n    }\n\n    detectDevice() {\n        const userAgent = navigator.userAgent || navigator.vendor || window.opera;\n        const isMobile = /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(userAgent.toLowerCase());\n        return isMobile ? 'mobile' : 'desktop';\n    }\n\n    handleConnectionError(error) {\n        this.connectionAttempts++;\n        this.isConnecting = false;\n        \n        console.log(`Connection attempt ${this.connectionAttempts} failed:`, error.message);\n        \n        // Check if the error is related to XHR polling\n        const isXHRError = error.message.toLowerCase().includes('xhr') || \n                          error.message.toLowerCase().includes('polling');\n        \n        if (isXHRError) {\n            // Try to force polling transport on XHR errors\n            if (this.socket) {\n                this.socket.io.opts.transports = ['polling'];\n                console.log('Forcing polling transport due to XHR error');\n            }\n        }\n        \n        if (this.connectionAttempts >= this.maxRetries) {\n            const errorMessage = {\n                type: 'CONNECTION_ERROR',\n                message: `Unable to connect to the server (${error.message}). Please check your internet connection.`,\n                isXHRError: isXHRError\n            };\n            console.error('Max retries reached:', errorMessage);\n            this.emitError(errorMessage);\n        } else {\n            this.handleReconnect();\n        }\n    }\n\n    handleReconnect() {\n        console.log('Attempting to reconnect...');\n        clearTimeout(this.reconnectTimer);\n        \n        const backoffDelay = Math.min(2000 * Math.pow(2, this.connectionAttempts - 1), 10000);\n        \n        this.reconnectTimer = setTimeout(() => {\n            if (this.socket) {\n                // Try to reconnect with current socket\n                this.socket.connect();\n            } else {\n                // Create new connection\n                this.connect();\n            }\n        }, backoffDelay);\n    }\n\n    requestLiveMatches() {\n        if (!this.socket) {\n            console.error('Cannot request matches: No socket connection');\n            return;\n        }\n        console.log('Requesting live matches from server');\n        this.socket.emit('request_live_matches');\n    }\n\n    emitError(error) {\n        const callback = this.listeners.get('error');\n        if (callback) {\n            callback(error);\n        }\n    }\n\n    disconnect() {\n        clearTimeout(this.reconnectTimer);\n        if (this.socket) {\n            console.log('Disconnecting socket...');\n            this.socket.disconnect();\n            this.socket = null;\n            this.connectionAttempts = 0;\n            this.isConnecting = false;\n        }\n    }\n\n    subscribe(event, callback) {\n        if (!this.socket) {\n            console.log('No socket connection, attempting to connect...');\n            this.connect();\n        }\n\n        console.log('Subscribing to event:', event);\n        this.socket.on(event, (data) => {\n            console.log(`Received ${event} event:`, data);\n            callback(data);\n        });\n        this.listeners.set(event, callback);\n    }\n\n    unsubscribe(event) {\n        if (!this.socket) return;\n\n        console.log('Unsubscribing from event:', event);\n        const callback = this.listeners.get(event);\n        if (callback) {\n            this.socket.off(event, callback);\n            this.listeners.delete(event);\n        }\n    }\n\n    subscribeToMatch(matchId) {\n        if (!this.socket) this.connect();\n        console.log('Subscribing to match:', matchId);\n        this.socket.emit('subscribe_match', matchId);\n    }\n\n    unsubscribeFromMatch(matchId) {\n        if (!this.socket) return;\n        console.log('Unsubscribing from match:', matchId);\n        this.socket.emit('unsubscribe_match', matchId);\n    }\n}\n\nexport default new SocketService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}