{"ast":null,"code":"import { io } from 'socket.io-client';\nclass SocketService {\n  constructor() {\n    var _process$env$REACT_AP, _process$env$REACT_AP2;\n    this.socket = null;\n    this.listeners = new Map();\n    this.connectionAttempts = 0;\n    this.maxRetries = 3;\n    this.debug = true;\n    this.isConnecting = false;\n    this.reconnectTimer = null;\n    this.hasConnectedBefore = false;\n    this.disabled = false; // Flag to disable socket completely if unreachable\n\n    // Get the socket URL from environment variables or use a fallback\n    this.socketUrl = ((_process$env$REACT_AP = process.env.REACT_APP_SOCKET_URL) === null || _process$env$REACT_AP === void 0 ? void 0 : _process$env$REACT_AP.trim()) || window.location.origin;\n    this.apiUrl = ((_process$env$REACT_AP2 = process.env.REACT_APP_API_URL) === null || _process$env$REACT_AP2 === void 0 ? void 0 : _process$env$REACT_AP2.trim()) || window.location.origin;\n    if (this.debug) {\n      console.log('SocketService Configuration:', {\n        socketUrl: this.socketUrl,\n        apiUrl: this.apiUrl,\n        env: process.env.NODE_ENV\n      });\n    }\n  }\n  connect() {\n    // Don't attempt to connect if service is disabled or already connecting/connected\n    if (this.disabled || this.socket || this.isConnecting) return;\n    this.isConnecting = true;\n    try {\n      // Create socket with options optimized for reliability\n      this.socket = io(this.socketUrl, {\n        reconnectionDelay: 1000,\n        reconnection: true,\n        reconnectionAttempts: 3,\n        transports: ['polling'],\n        // Only use polling for maximum compatibility\n        timeout: 10000,\n        // Shorter timeout for faster detection of issues\n        withCredentials: true,\n        autoConnect: true,\n        forceNew: true,\n        // Always create a new connection\n        path: '/socket.io',\n        query: {\n          timestamp: Date.now()\n        }\n      });\n      this.setupConnectionHandlers();\n    } catch (error) {\n      console.error('Error creating socket connection:', error);\n      this.handleConnectionError(error);\n    }\n  }\n  setupConnectionHandlers() {\n    if (!this.socket) return;\n    this.socket.on('connect', () => {\n      var _this$socket, _this$socket$io, _this$socket$io$engin, _this$socket$io$engin2;\n      const transport = ((_this$socket = this.socket) === null || _this$socket === void 0 ? void 0 : (_this$socket$io = _this$socket.io) === null || _this$socket$io === void 0 ? void 0 : (_this$socket$io$engin = _this$socket$io.engine) === null || _this$socket$io$engin === void 0 ? void 0 : (_this$socket$io$engin2 = _this$socket$io$engin.transport) === null || _this$socket$io$engin2 === void 0 ? void 0 : _this$socket$io$engin2.name) || 'unknown';\n      console.log('Socket connected successfully:', {\n        transport: transport,\n        id: this.socket.id\n      });\n      this.connectionAttempts = 0;\n      this.isConnecting = false;\n      this.hasConnectedBefore = true;\n      clearTimeout(this.reconnectTimer);\n\n      // Request live matches immediately after connection\n      this.requestLiveMatches();\n    });\n    this.socket.on('connect_error', error => {\n      console.log('Socket connection error:', error.message);\n      this.handleConnectionError(error);\n    });\n    this.socket.on('disconnect', reason => {\n      console.log('Socket disconnected. Reason:', reason);\n      this.isConnecting = false;\n\n      // Handle intentional disconnections\n      if (reason === 'io client disconnect' || reason === 'io instance close' || this.disabled) {\n        this.socket = null;\n        return;\n      }\n    });\n    this.socket.on('error', error => {\n      console.log('Socket error event:', error.message || 'Unknown error');\n      if (this.listeners.has('error')) {\n        const callback = this.listeners.get('error');\n        callback(error);\n      }\n    });\n  }\n  handleConnectionError(error) {\n    var _error$message, _error$message$toLowe, _error$message$toLowe2, _error$message2, _error$message2$toLow, _error$message2$toLow2;\n    this.connectionAttempts++;\n    this.isConnecting = false;\n\n    // Check if the error is related to XHR polling\n    const isXHRError = ((_error$message = error.message) === null || _error$message === void 0 ? void 0 : (_error$message$toLowe = _error$message.toLowerCase) === null || _error$message$toLowe === void 0 ? void 0 : (_error$message$toLowe2 = _error$message$toLowe.call(_error$message)) === null || _error$message$toLowe2 === void 0 ? void 0 : _error$message$toLowe2.includes('xhr')) || ((_error$message2 = error.message) === null || _error$message2 === void 0 ? void 0 : (_error$message2$toLow = _error$message2.toLowerCase) === null || _error$message2$toLow === void 0 ? void 0 : (_error$message2$toLow2 = _error$message2$toLow.call(_error$message2)) === null || _error$message2$toLow2 === void 0 ? void 0 : _error$message2$toLow2.includes('polling'));\n    console.log(`Connection attempt ${this.connectionAttempts} failed:`, error.message);\n\n    // After 2 failed attempts, disable socket functionality entirely\n    if (this.connectionAttempts >= 2 || isXHRError) {\n      this.disabled = true;\n      const errorMessage = {\n        type: 'CONNECTION_ERROR',\n        message: `Socket connection unavailable (${error.message}). App will continue to function without live updates.`,\n        isXHRError: isXHRError\n      };\n      console.log('Socket service disabled due to connection issues');\n\n      // Clean up resources\n      if (this.socket) {\n        this.socket.disconnect();\n        this.socket = null;\n      }\n      this.isConnecting = false;\n      clearTimeout(this.reconnectTimer);\n      if (this.listeners.has('error')) {\n        const callback = this.listeners.get('error');\n        callback(errorMessage);\n      }\n    }\n  }\n  detectDevice() {\n    const userAgent = navigator.userAgent || navigator.vendor || window.opera;\n    const isMobile = /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(userAgent.toLowerCase());\n    return isMobile ? 'mobile' : 'desktop';\n  }\n  handleReconnect() {\n    console.log('Attempting to reconnect...');\n    clearTimeout(this.reconnectTimer);\n\n    // Use exponential backoff with a cap\n    const backoffDelay = Math.min(2000 * Math.pow(1.5, this.connectionAttempts - 1), 8000);\n    this.reconnectTimer = setTimeout(() => {\n      if (this.socket) {\n        // Clear existing socket first\n        this.socket.disconnect();\n        this.socket = null;\n      }\n      // Create new connection\n      this.connect();\n    }, backoffDelay);\n  }\n  requestLiveMatches() {\n    if (!this.socket || !this.socket.connected) {\n      console.log('Cannot request matches: No active socket connection');\n      return;\n    }\n    console.log('Requesting live matches from server');\n    this.socket.emit('request_live_matches');\n  }\n  emitError(error) {\n    const callback = this.listeners.get('error');\n    if (callback) {\n      callback(error);\n    }\n  }\n  disconnect() {\n    // Clear any pending reconnect attempts\n    clearTimeout(this.reconnectTimer);\n    if (this.socket) {\n      try {\n        console.log('Disconnecting socket...');\n\n        // Remove all listeners first to prevent reconnection triggers\n        this.socket.removeAllListeners();\n        this.socket.io.removeAllListeners();\n\n        // Then disconnect\n        this.socket.disconnect();\n      } catch (error) {\n        console.error('Error during socket disconnect:', error);\n        // Continue with cleanup regardless of errors\n      } finally {\n        // Always reset socket state\n        this.socket = null;\n        this.connectionAttempts = 0;\n        this.isConnecting = false;\n        this.listeners.clear();\n      }\n    }\n  }\n  subscribe(event, callback) {\n    // Connect if needed, but don't block or throw errors\n    if (!this.socket) {\n      console.log('No socket connection, attempting to connect...');\n      this.connect();\n\n      // If still no socket, just record the listener without subscribing\n      if (!this.socket) {\n        console.log(`Saving listener for ${event} without socket connection`);\n        this.listeners.set(event, callback);\n        return;\n      }\n    }\n    console.log('Subscribing to event:', event);\n\n    // Store callback and add listener if socket exists\n    if (this.socket) {\n      this.socket.on(event, data => {\n        if (this.debug) console.log(`Received ${event} event:`, data);\n        callback(data);\n      });\n    }\n\n    // Always store the callback so we can reattach if needed\n    this.listeners.set(event, callback);\n  }\n  unsubscribe(event) {\n    console.log('Unsubscribing from event:', event);\n\n    // Remove from socket if it exists\n    if (this.socket) {\n      this.socket.off(event);\n    }\n\n    // Always remove from our tracked listeners\n    this.listeners.delete(event);\n  }\n  subscribeToMatch(matchId) {\n    if (!this.socket) {\n      // Try to connect, but don't block if it fails\n      this.connect();\n      if (!this.socket || !this.socket.connected) {\n        console.log(`Cannot subscribe to match ${matchId}: No active socket connection`);\n        return;\n      }\n    }\n    console.log('Subscribing to match:', matchId);\n    this.socket.emit('subscribe_match', matchId);\n  }\n  unsubscribeFromMatch(matchId) {\n    if (!this.socket || !this.socket.connected) {\n      console.log(`Cannot unsubscribe from match ${matchId}: No active socket connection`);\n      return;\n    }\n    console.log('Unsubscribing from match:', matchId);\n    this.socket.emit('unsubscribe_match', matchId);\n  }\n}\nexport default new SocketService();","map":{"version":3,"names":["io","SocketService","constructor","_process$env$REACT_AP","_process$env$REACT_AP2","socket","listeners","Map","connectionAttempts","maxRetries","debug","isConnecting","reconnectTimer","hasConnectedBefore","disabled","socketUrl","process","env","REACT_APP_SOCKET_URL","trim","window","location","origin","apiUrl","REACT_APP_API_URL","console","log","NODE_ENV","connect","reconnectionDelay","reconnection","reconnectionAttempts","transports","timeout","withCredentials","autoConnect","forceNew","path","query","timestamp","Date","now","setupConnectionHandlers","error","handleConnectionError","on","_this$socket","_this$socket$io","_this$socket$io$engin","_this$socket$io$engin2","transport","engine","name","id","clearTimeout","requestLiveMatches","message","reason","has","callback","get","_error$message","_error$message$toLowe","_error$message$toLowe2","_error$message2","_error$message2$toLow","_error$message2$toLow2","isXHRError","toLowerCase","call","includes","errorMessage","type","disconnect","detectDevice","userAgent","navigator","vendor","opera","isMobile","test","handleReconnect","backoffDelay","Math","min","pow","setTimeout","connected","emit","emitError","removeAllListeners","clear","subscribe","event","set","data","unsubscribe","off","delete","subscribeToMatch","matchId","unsubscribeFromMatch"],"sources":["E:/Muqtasid BS Computer Science/SPRING-25/Project/ballinfo/frontend/src/services/socketService.js"],"sourcesContent":["import { io } from 'socket.io-client';\n\nclass SocketService {\n    constructor() {\n        this.socket = null;\n        this.listeners = new Map();\n        this.connectionAttempts = 0;\n        this.maxRetries = 3;\n        this.debug = true;\n        this.isConnecting = false;\n        this.reconnectTimer = null;\n        this.hasConnectedBefore = false;\n        this.disabled = false; // Flag to disable socket completely if unreachable\n        \n        // Get the socket URL from environment variables or use a fallback\n        this.socketUrl = process.env.REACT_APP_SOCKET_URL?.trim() || window.location.origin;\n        this.apiUrl = process.env.REACT_APP_API_URL?.trim() || window.location.origin;\n        \n        if (this.debug) {\n            console.log('SocketService Configuration:', {\n                socketUrl: this.socketUrl,\n                apiUrl: this.apiUrl,\n                env: process.env.NODE_ENV\n            });\n        }\n    }\n\n    connect() {\n        // Don't attempt to connect if service is disabled or already connecting/connected\n        if (this.disabled || this.socket || this.isConnecting) return;\n\n        this.isConnecting = true;\n        \n        try {\n            // Create socket with options optimized for reliability\n            this.socket = io(this.socketUrl, {\n                reconnectionDelay: 1000,\n                reconnection: true,\n                reconnectionAttempts: 3,\n                transports: ['polling'], // Only use polling for maximum compatibility\n                timeout: 10000, // Shorter timeout for faster detection of issues\n                withCredentials: true,\n                autoConnect: true,\n                forceNew: true, // Always create a new connection\n                path: '/socket.io',\n                query: {\n                    timestamp: Date.now(),\n                }\n            });\n\n            this.setupConnectionHandlers();\n        } catch (error) {\n            console.error('Error creating socket connection:', error);\n            this.handleConnectionError(error);\n        }\n    }\n\n    setupConnectionHandlers() {\n        if (!this.socket) return;\n\n        this.socket.on('connect', () => {\n            const transport = this.socket?.io?.engine?.transport?.name || 'unknown';\n            console.log('Socket connected successfully:', {\n                transport: transport,\n                id: this.socket.id\n            });\n            \n            this.connectionAttempts = 0;\n            this.isConnecting = false;\n            this.hasConnectedBefore = true;\n            clearTimeout(this.reconnectTimer);\n            \n            // Request live matches immediately after connection\n            this.requestLiveMatches();\n        });\n\n        this.socket.on('connect_error', (error) => {\n            console.log('Socket connection error:', error.message);\n            this.handleConnectionError(error);\n        });\n\n        this.socket.on('disconnect', (reason) => {\n            console.log('Socket disconnected. Reason:', reason);\n            this.isConnecting = false;\n            \n            // Handle intentional disconnections\n            if (reason === 'io client disconnect' || \n                reason === 'io instance close' || \n                this.disabled) {\n                this.socket = null;\n                return;\n            }\n        });\n\n        this.socket.on('error', (error) => {\n            console.log('Socket error event:', error.message || 'Unknown error');\n            \n            if (this.listeners.has('error')) {\n                const callback = this.listeners.get('error');\n                callback(error);\n            }\n        });\n    }\n\n    handleConnectionError(error) {\n        this.connectionAttempts++;\n        this.isConnecting = false;\n        \n        // Check if the error is related to XHR polling\n        const isXHRError = error.message?.toLowerCase?.()?.includes('xhr') || \n                          error.message?.toLowerCase?.()?.includes('polling');\n        \n        console.log(`Connection attempt ${this.connectionAttempts} failed:`, error.message);\n        \n        // After 2 failed attempts, disable socket functionality entirely\n        if (this.connectionAttempts >= 2 || isXHRError) {\n            this.disabled = true;\n            \n            const errorMessage = {\n                type: 'CONNECTION_ERROR',\n                message: `Socket connection unavailable (${error.message}). App will continue to function without live updates.`,\n                isXHRError: isXHRError\n            };\n            \n            console.log('Socket service disabled due to connection issues');\n            \n            // Clean up resources\n            if (this.socket) {\n                this.socket.disconnect();\n                this.socket = null;\n            }\n            \n            this.isConnecting = false;\n            clearTimeout(this.reconnectTimer);\n            \n            if (this.listeners.has('error')) {\n                const callback = this.listeners.get('error');\n                callback(errorMessage);\n            }\n        }\n    }\n\n    detectDevice() {\n        const userAgent = navigator.userAgent || navigator.vendor || window.opera;\n        const isMobile = /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(userAgent.toLowerCase());\n        return isMobile ? 'mobile' : 'desktop';\n    }\n\n    handleReconnect() {\n        console.log('Attempting to reconnect...');\n        clearTimeout(this.reconnectTimer);\n\n        // Use exponential backoff with a cap\n        const backoffDelay = Math.min(2000 * Math.pow(1.5, this.connectionAttempts - 1), 8000);\n\n        this.reconnectTimer = setTimeout(() => {\n            if (this.socket) {\n                // Clear existing socket first\n                this.socket.disconnect();\n                this.socket = null;\n            }\n            // Create new connection\n            this.connect();\n        }, backoffDelay);\n    }\n\n    requestLiveMatches() {\n        if (!this.socket || !this.socket.connected) {\n            console.log('Cannot request matches: No active socket connection');       \n            return;\n        }\n        console.log('Requesting live matches from server');\n        this.socket.emit('request_live_matches');\n    }\n\n    emitError(error) {\n        const callback = this.listeners.get('error');\n        if (callback) {\n            callback(error);\n        }\n    }\n\n    disconnect() {\n        // Clear any pending reconnect attempts\n        clearTimeout(this.reconnectTimer);\n        \n        if (this.socket) {\n            try {\n                console.log('Disconnecting socket...');\n                \n                // Remove all listeners first to prevent reconnection triggers\n                this.socket.removeAllListeners();\n                this.socket.io.removeAllListeners();\n                \n                // Then disconnect\n                this.socket.disconnect();\n            } catch (error) {\n                console.error('Error during socket disconnect:', error);\n                // Continue with cleanup regardless of errors\n            } finally {\n                // Always reset socket state\n                this.socket = null;\n                this.connectionAttempts = 0;\n                this.isConnecting = false;\n                this.listeners.clear();\n            }\n        }\n    }\n\n    subscribe(event, callback) {\n        // Connect if needed, but don't block or throw errors\n        if (!this.socket) {\n            console.log('No socket connection, attempting to connect...');       \n            this.connect();\n            \n            // If still no socket, just record the listener without subscribing\n            if (!this.socket) {\n                console.log(`Saving listener for ${event} without socket connection`);\n                this.listeners.set(event, callback);\n                return;\n            }\n        }\n\n        console.log('Subscribing to event:', event);\n        \n        // Store callback and add listener if socket exists\n        if (this.socket) {\n            this.socket.on(event, (data) => {\n                if (this.debug) console.log(`Received ${event} event:`, data);\n                callback(data);\n            });\n        }\n        \n        // Always store the callback so we can reattach if needed\n        this.listeners.set(event, callback);\n    }\n\n    unsubscribe(event) {\n        console.log('Unsubscribing from event:', event);\n        \n        // Remove from socket if it exists\n        if (this.socket) {\n            this.socket.off(event);\n        }\n        \n        // Always remove from our tracked listeners\n        this.listeners.delete(event);\n    }\n\n    subscribeToMatch(matchId) {\n        if (!this.socket) {\n            // Try to connect, but don't block if it fails\n            this.connect();\n            if (!this.socket || !this.socket.connected) {\n                console.log(`Cannot subscribe to match ${matchId}: No active socket connection`);\n                return;\n            }\n        }\n        \n        console.log('Subscribing to match:', matchId);\n        this.socket.emit('subscribe_match', matchId);\n    }\n\n    unsubscribeFromMatch(matchId) {\n        if (!this.socket || !this.socket.connected) {\n            console.log(`Cannot unsubscribe from match ${matchId}: No active socket connection`);\n            return;\n        }\n        \n        console.log('Unsubscribing from match:', matchId);\n        this.socket.emit('unsubscribe_match', matchId);\n    }\n}\n\nexport default new SocketService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}